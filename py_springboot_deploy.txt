config file...
{
    "server": {
        "host": "your-server-ip",
        "port": 22,
        "username": "your-username",
        "password": "your-password"
    },
    "application": {
        "local_jar_path": "C:/path/to/your/application.jar",
        "remote_jar_path": "/opt/myapp/application.jar",
        "start_command": "java -Xmx512m -Dspring.profiles.active=prod"
    }
}

----------------


import paramiko
import os
import sys
import json
from pathlib import Path
import time
import argparse

class SpringBootDeployer:
    def __init__(self, config_path='config.json'):
        self.config = self.load_config(config_path)
        self.ssh_client = None
        self.sftp_client = None

    def load_config(self, config_path):
        """Load configuration from JSON file"""
        try:
            with open(config_path, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"Configuration file {config_path} not found!")
            sys.exit(1)

    def connect(self):
        """Establish SSH connection to remote server"""
        try:
            self.ssh_client = paramiko.SSHClient()
            self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh_client.connect(
                hostname=self.config['server']['host'],
                port=self.config['server']['port'],
                username=self.config['server']['username'],
                password=self.config['server']['password']
            )
            self.sftp_client = self.ssh_client.open_sftp()
            print("Successfully connected to remote server")
        except Exception as e:
            print(f"Failed to connect to remote server: {str(e)}")
            sys.exit(1)

    def get_process_id(self, process_name):
        """Get the process ID of the Java application"""
        stdin, stdout, stderr = self.ssh_client.exec_command(f"pgrep -f {process_name}")
        process_id = stdout.read().decode().strip()
        return process_id if process_id else None

    def check_if_process_running(self, process_name):
        """Check if the Java process is already running"""
        return bool(self.get_process_id(process_name))

    def stop_application(self):
        """Stop the SpringBoot application"""
        try:
            self.connect()
            process_name = os.path.basename(self.config['application']['remote_jar_path'])
            
            process_id = self.get_process_id(process_name)
            if process_id:
                print(f"Stopping application (PID: {process_id})...")
                self.ssh_client.exec_command(f"kill {process_id}")
                
                # Wait for the process to stop
                max_attempts = 6
                attempts = 0
                while attempts < max_attempts:
                    if not self.check_if_process_running(process_name):
                        print("Application stopped successfully")
                        return True
                    time.sleep(5)
                    attempts += 1
                
                # Force kill if graceful shutdown fails
                if self.check_if_process_running(process_name):
                    print("Force stopping application...")
                    self.ssh_client.exec_command(f"kill -9 {process_id}")
                    time.sleep(2)
                    if not self.check_if_process_running(process_name):
                        print("Application force stopped successfully")
                        return True
                    else:
                        print("Failed to stop application")
                        return False
            else:
                print("No running application found")
                return True
        except Exception as e:
            print(f"Error stopping application: {str(e)}")
            return False
        finally:
            self.cleanup()

    def transfer_file(self):
        """Transfer the JAR file to remote server"""
        try:
            local_path = self.config['application']['local_jar_path']
            remote_path = self.config['application']['remote_jar_path']
            
            # Create remote directory if it doesn't exist
            remote_dir = os.path.dirname(remote_path)
            self.ssh_client.exec_command(f"mkdir -p {remote_dir}")
            
            print(f"Transferring {local_path} to {remote_path}...")
            self.sftp_client.put(local_path, remote_path)
            print("File transfer completed successfully")
            return True
        except Exception as e:
            print(f"Failed to transfer file: {str(e)}")
            return False

    def start_application(self):
        """Start the SpringBoot application on remote server"""
        try:
            self.connect()
            java_cmd = self.config['application']['start_command']
            remote_path = self.config['application']['remote_jar_path']
            process_name = os.path.basename(remote_path)
            
            if self.check_if_process_running(process_name):
                print("Application is already running")
                return False
            
            # Construct the full command
            full_cmd = f"nohup {java_cmd} -jar {remote_path} > app.log 2>&1 &"
            
            print("Starting application...")
            stdin, stdout, stderr = self.ssh_client.exec_command(full_cmd)
            time.sleep(5)  # Wait for application to start
            
            # Check if application started successfully
            if self.check_if_process_running(process_name):
                print("Application started successfully")
                # Get and display the process ID
                process_id = self.get_process_id(process_name)
                print(f"Application running with PID: {process_id}")
                return True
            else:
                print("Failed to start application. Check app.log on remote server")
                return False
        except Exception as e:
            print(f"Failed to start application: {str(e)}")
            return False
        finally:
            self.cleanup()

    def cleanup(self):
        """Close SSH and SFTP connections"""
        if self.sftp_client:
            self.sftp_client.close()
        if self.ssh_client:
            self.ssh_client.close()

    def deploy(self):
        """Main deployment method"""
        try:
            self.connect()
            self.stop_application()
            if self.transfer_file():
                time.sleep(2)  # Short wait after file transfer
                return self.start_application()
            return False
        finally:
            self.cleanup()

def main():
    parser = argparse.ArgumentParser(description='SpringBoot Application Deployment Utility')
    parser.add_argument('action', choices=['deploy', 'start', 'stop'], 
                       help='Action to perform (deploy/start/stop)')
    parser.add_argument('--config', default='config.json', 
                       help='Path to configuration file (default: config.json)')

    args = parser.parse_args()
    deployer = SpringBootDeployer(args.config)

    if args.action == 'deploy':
        deployer.deploy()
    elif args.action == 'start':
        deployer.start_application()
    elif args.action == 'stop':
        deployer.stop_application()

if __name__ == "__main__":
    main()


