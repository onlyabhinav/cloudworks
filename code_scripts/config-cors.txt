@Configuration
@EnableOAuth2Sso
@EnableResourceServer
@Order(value = 0)
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(final HttpSecurity http) throws Exception {
        http.csrf().disable()
            .cors().configurationSource(corsConfigurationSource()).and()  // Add this line
            .headers().cacheControl().disable().and()
            .authorizeRequests()
            .antMatchers(
                "/internal/**/*", "/login", "/login/*", "/**/login**", "/static/**", "/index.html",
                "/sockjs-node/**", "/auth/**", "/health", "/logfile", "/metrics", "/env", "/loggers",
                "/jolokia", "/dump", "/auditevents", "/liquibase", // ACTUATOR
                "/flyway", "/heapdump", "/info", "/actuator/**"
            ).permitAll()
            .anyRequest().authenticated();

        http
            .headers()
            .httpStrictTransportSecurity()
            .maxAgeInSeconds(Duration.ofDays(365).getSeconds()) // 1 year
            .includeSubDomains(true);
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000", "http://localhost:4200")); // Add your UI dev ports
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("*"));
        configuration.setAllowCredentials(true);
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
