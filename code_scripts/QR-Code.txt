<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code Generator</title>
    <script src="https://cdn.jsdelivr.net/npm/qrcode-generator@1.4.4/qrcode.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f7fafc; /* Light background */
        }

        .container {
            background-color: #fff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow */
            text-align: center;
            max-width: 80%; /* Responsive width */
            width: 400px; /* Max width for larger screens */
        }

        h1 {
            margin-bottom: 20px;
            color: #1a202c; /* Dark heading */
        }

        #qrCodeCanvas {
            margin-bottom: 20px;
            border: 1px solid #e2e8f0; /* Light border */
            border-radius: 8px;
            max-width: 100%; /* Ensure canvas doesn't overflow */
            height: auto; /* Maintain aspect ratio */
        }

        input[type="text"] {
            padding: 12px;
            width: calc(100% - 24px); /* Adjust for padding */
            margin-bottom: 20px;
            border: 1px solid #e2e8f0; /* Light border */
            border-radius: 6px;
            font-size: 16px;
            transition: border-color 0.2s ease; /* Smooth transition */
        }

        input[type="text"]:focus {
            outline: none;
            border-color: #4299e1; /* Focus border color */
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15); /* Focus shadow */
        }


        button {
            padding: 12px 25px;
            background-color: #4299e1; /* Blue button */
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease; /* Smooth transition */
            width: 100%; /* Full width button */
        }

        button:hover {
            background-color: #3182ce; /* Darker blue on hover */
        }

        #error-message {
            color: #e53e3e;
            margin-top: 10px;
            font-size: 14px;
            display: none; /* Initially hidden */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>QR Code Generator</h1>
        <canvas id="qrCodeCanvas"></canvas>
        <input type="text" id="textInput" placeholder="Enter text to encode">
        <div id="error-message">Please enter a valid text.</div>
        <button id="generateButton">Generate QR Code</button>
    </div>

    <script>
        const canvas = document.getElementById('qrCodeCanvas');
        const textInput = document.getElementById('textInput');
        const generateButton = document.getElementById('generateButton');
        const errorMessage = document.getElementById('error-message');

        generateButton.addEventListener('click', () => {
            const text = textInput.value.trim();

            if (text === "") {
                errorMessage.style.display = "block"; // Show error message
                return;
            } else {
                errorMessage.style.display = "none"; // Hide error message
            }

            const qrCode = qrcode(0, 'M'); // 0 = version, M = error correction level
            qrCode.addData(text);
            qrCode.make();

            const context = canvas.getContext('2d');
            const canvasSize = 250; // Increased size for better resolution
            canvas.width = canvasSize;
            canvas.height = canvasSize;
            const cellSize = canvasSize / qrCode.getModuleCount();

            context.fillStyle = '#FFFFFF'; // White background
            context.fillRect(0, 0, canvasSize, canvasSize);

            for (let row = 0; row < qrCode.getModuleCount(); row++) {
                for (let col = 0; col < qrCode.getModuleCount(); col++) {
                    if (qrCode.isDark(row, col)) {
                        context.fillStyle = '#000000'; // Black color
                        context.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);
                    }
                }
            }
        });
    </script>
</body>
</html>
